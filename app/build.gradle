apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "kotlin-kapt"

ext {
    androidx_version = '1.0.0'
    lifecycle_version = '2.1.0-alpha03'
    room_version = '2.1.0-alpha06'
    nav_version = '1.0.0'
    constraintlayout_version = '2.0.0-alpha3'
    dagger_version = '2.21'
    retrofit_version = '2.5.0'
    toro_version = "3.5.2"
    exoplayer_version = "2.7.3"
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
    }
}

repositories {
    google()
    jcenter()
    maven { url "https://jitpack.io" }
}

android {
    compileSdkVersion 'android-Q'
    buildToolsVersion "28.0.3"

    defaultConfig {
        applicationId "com.splendidbits.peacock"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        versionCode = 22
        versionName = "1.1.1"

        compileSdkVersion 28
        targetSdkVersion 28
        minSdkVersion 21
    }

    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }

    signingConfigs {
        if (hasProperty("../peacock.secret")) {
            Properties props = new Properties()
            props.load(new FileInputStream(file(property("../peacock.secret"))))

            release {
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['keyAlias']
                keyPassword props['keyPassword']
            }
        }
        debug {
        }
    }

    androidExtensions {
        experimental = true
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    packagingOptions {
        exclude "META-INF/rxjava.properties"
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    // Using product flavors to allow fast builds for the debug and auto build types. Variant filters
    // are used below to filter out undesired combinations with th "fast" flavor such as "fastRelease".
    flavorDimensions "default"
    productFlavors {
        stable {
            dimension "default"
        }
    }
    buildTypes {
        if (hasProperty("../peacock.secret")) {
            release {
                signingConfig signingConfigs.release
                debuggable false
                minifyEnabled true
                useProguard true
                proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            }
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix " debug"
            debuggable true
            minifyEnabled false
            useProguard false
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

configurations {
    implementation {
//        exclude group: "com.android"
    }
}

dependencies {
    implementation fileTree(include: "*.jar", dir: "libs")
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "com.google.android.material:material:${androidx_version}"
    implementation "androidx.annotation:annotation:${androidx_version}"
    implementation "androidx.appcompat:appcompat:${androidx_version}"
    implementation "androidx.recyclerview:recyclerview:${androidx_version}"
    implementation "androidx.browser:browser:${androidx_version}"
    implementation "androidx.legacy:legacy-support-v4:${androidx_version}"
    implementation "androidx.constraintlayout:constraintlayout:${constraintlayout_version}"
    implementation "androidx.constraintlayout:constraintlayout-solver:${constraintlayout_version}"

    implementation "androidx.lifecycle:lifecycle-livedata:${lifecycle_version}"

    implementation "androidx.room:room-common:${room_version}"
    kapt "androidx.room:room-compiler:${room_version}"
    implementation "androidx.room:room-rxjava2:${room_version}"
    implementation "androidx.room:room-migration:${room_version}"

    implementation "android.arch.navigation:navigation-fragment-ktx:${nav_version}"
    implementation "android.arch.navigation:navigation-ui-ktx:${nav_version}"

    implementation "com.google.dagger:dagger:${dagger_version}"
    kapt "com.google.dagger:dagger-compiler:${dagger_version}"

    implementation "io.reactivex.rxjava2:rxandroid:2.0.2"
    implementation "io.reactivex.rxjava2:rxjava:2.2.0"

    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    implementation "com.github.javiersantos:PiracyChecker:1.2.3"
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.okhttp3:okhttp:3.14.0'
    implementation "com.github.mklimek:ssl-utils-android:1.0.1"
    implementation "com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0"
    implementation "com.squareup.picasso:picasso:2.71828"
    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'commons-io:commons-io:20030203.000550'

    implementation "im.ene.toro3:toro:${toro_version}"
    implementation "im.ene.toro3:toro-ext-exoplayer:${toro_version}"
    implementation "com.google.android.exoplayer:exoplayer-core:${exoplayer_version}"
    implementation "com.google.android.exoplayer:exoplayer-hls:${exoplayer_version}"
    implementation "com.google.android.exoplayer:exoplayer-ui:${exoplayer_version}"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Required for local unit tests (JUnit 4 framework)
    testImplementation 'junit:junit:4.13-beta-2'

    // Required for instrumented tests
    androidTestImplementation 'androidx.test:runner:1.1.2-alpha02'
    androidTestImplementation 'androidx.test:monitor:1.1.2-alpha02'
}
